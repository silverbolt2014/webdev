HTTP is a communication standard governing the requests and responses that take
place between the browser running on the end user’s computer and the web server.
The server’s job is to accept a request from the client and attempt to reply to it in a
meaningful way, usually by serving up a requested web page—that’s why the term
server is used. The natural counterpart to a server is a client, so that term is applied
both to the web browser and the computer on which it’s running.


Here are the steps:
1. You enter http://server.com into your browser’s address bar.
2. Your browser looks up the IP address for server.com.
3. Your browser issues a request to that address for the web server’s home page.
4. The request crosses the Internet and arrives at the server.com web server.
5. The web server, having received the request, fetches the home page from its hard
disk.
6. With the home page now in memory, the web server notices that it is a file incorporating
PHP scripting and passes the page to the PHP interpreter.
7. The PHP interpreter executes the PHP code.
8. Some of the PHP contains MySQL statements, which the PHP interpreter now
passes to the MySQL database engine.
9. The MySQL database returns the results of the statements back to the PHP interpreter.
10. The PHP interpreter returns the results of the executed PHP code, along with the
results from the MySQL database, to the web server.
11. The web server returns the page to the requesting client, which displays it.



JavaScript was originally developed to offer dynamic control
over the various elements within an HTML document, and that is still its main use. But
more and more, JavaScript is being used for Ajax. This is a term for the process of
accessing the web server in the background. (It originally meant “Asynchronous Java-
Script and XML,” but that phrase is already a bit outdated.)


Test Your Knowledge
1. What four components are needed to create a fully dynamic web page?
2. What does HTML stand for?
3. Why does the name MySQL contain the letters SQL?
4. PHP and JavaScript are both programming languages that generate dynamic results
for web pages. What is their main difference, and why would you use both of them?
5. What does CSS stand for?
6. If you encounter a bug (which is rare) in one of the open source tools, how do you
think you could get it fixed?

1. PHP, MySQL, JavaScript, Apache
2. hyper text markup languages
3. MySQL accepts commands in the SQL language so its name contains SQL
4. PHP is used for the backend (on the server).  Javascript is used on the front end (client side browser)
5. Cascading Sytle Sheets
6. I could fix it myself or submit a bug to the development team.


-----

Chapter 2

PHP is the language that you use to make the server
generate dynamic output—output that is potentially different each time a browser requests
a page.


By default, PHP documents end with the extension .php. When a web server encounters
this extension in a requested file, it automatically passes it to the PHP processor. Of
course, web servers are highly configurable, and some web developers choose to force
files ending with .htm or .html to also get parsed by the PHP processor, usually because
they want to hide the fact that they are using PHP.
Your PHP program is responsible for passing back a clean file suitable for display in a
web browser. At its very simplest, a PHP document will output only HTML.


----
Chapter 3


There are two ways in which you can add comments to your PHP code. The first turns
a single line into a comment by preceding it with a pair of forward slashes, like this:
// This is a comment


Multiline Comments
<?php
/* This is a section
of multiline comments
that will not be
interpreted */
?>


Array Creation
$team = array('Bill', 'Joe', 'Mike', 'Chris', 'Jim');


PHP supports two types of strings that are denoted by the type of quotation mark that
you use. If you wish to assign a literal string, preserving the exact contents, you should
use the single quotation mark (apostrophe), like this:

$info = 'Preface variables with a $ like this: $variable';


In this case, every character within the single-quoted string is assigned to $info. If you
had used double quotes, PHP would have attempted to evaluate $variable as a variable

On the other hand, when you want to include the value of a variable inside a string,
you do so by using a double-quoted string:

echo "There have been $count presidents of the US";

As you will realize, this syntax also offers a simpler form of concatenation in which you
don’t need to use a period, or close and reopen quotes, to append one string to another.
This is called variable substitution. You will notice some applications using it extensively
and others not using it at all.


you can use escape characters to insert various special characters into
strings, such as tabs, newlines, and carriage returns. These are represented, as you might
guess, by \t, \n, and \r. Here is an example using tabs to lay out a heading; it is included
here merely to illustrate escapes, because in web pages there are always better ways to
do layout:

$heading = "Date\tName\tPayment";

These special backslash-preceded characters work only in double-quoted strings. In
single-quoted strings, the preceding string would be displayed with the ugly \t sequences
instead of tabs. Within single-quoted strings, only the escaped apostrophe
(\') and the escaped backslash itself (\\) are recognized as escaped characters.



How to create constants in php

define("ROOT_LOCATION", "/usr/local/www/");
Then, to read the contents of the variable, you just refer to it like a regular variable (but
it isn’t preceded by a dollar sign):

$directory = ROOT_LOCATION;


----

Function declaration example:

<?php
function longdate($timestamp)
{
return date("l F jS Y", $timestamp);
}
?>

----

by default, variables created within a function are local to
that function and variables created outside of any functions can be accessed only by
nonfunction code.

---

Test Your Knowledge
1. What tag is used to cause PHP to start interpreting program code? And what is the
short form of the tag?
2. What are the two types of comment tags?
3. Which character must be placed at the end of every PHP statement?
4. Which symbol is used to preface all PHP variable names?
5. What can a variable store?
6. What is the difference between $variable = 1 and $variable == 1?
7. Why do you suppose that an underscore is allowed in variable names
($current_user), whereas hyphens are not ($current-user)?
8. Are variable names case-sensitive?
9. Can you use spaces in variable names?
10. How do you convert one variable type to another (say, a string to a number)?
11. What is the difference between ++$j and $j++?
12. Are the operators && and and interchangeable?
13. How can you create a multiline echo or assignment?
14. Can you redefine a constant?
15. How do you escape a quotation mark?
16. What is the difference between the echo and print commands?
17. What is the purpose of functions?
18. How can you make a variable accessible to all parts of a PHP program?
19. If you generate data within a function, what are a couple of ways to convey the
data to the rest of the program?
20. What is the result of combining a string with a number?



1. "<?php " and "?>"
2. // and /* ... */
3. ;
4. $
5. Anything you assign to it.
6. First one is assignment, the second one is comparison.
7. I think hyphens are not allowed so that they are not confused with subtractions.
8. Yes variable names are case-sensitive.
9. no.
10. Just use it in the function or situation that expects it to be a particular type.
The conversion is done automatically.
11. pre-increment vs post-increment
12. Not really unless parenthesis are used.
13. By using the heredoc construct.
14. no.
15. \'
16. echo is a php construct. print is a function.
17. To group a set of statements that perform a specific task so that they can be used as needed.
18. Preceed it with the global keyword.
19. Use a return statement to return the data or assign the data to a global variable.
20. If concatenation is used a string.  If a mathematical operator is used a number.


----


Chapter 4


An expression is a combination of values, variables, operators, and functions that results
in a value.

in PHP the constant FALSE is defined as NULL, or nothing.

The simplest form of an expression is a literal, which simply means something that
evaluates to itself, such as the number 73 or the string “Hello”. An expression could
also simply be a variable, which evaluates to the value that has been assigned to it.
These are both types of expressions because they return a value.

any strings composed entirely of numbers will be converted to numbers
whenever compared with a number


break

In a loop, "break" breaks out of the first for loop that it is located inside.


$c = (int) ($a / $b);
This is called explicit casting. Note that in order to ensure that the value of the entire
expression is cast to an integer, the expression is placed within parentheses. Otherwise,
only the variable $a would have been cast to an integer—a pointless exercise, as the
division by $b would still have returned a floating-point number.

Test Your Knowledge
1. What actual underlying values are represented by TRUE and FALSE?
2. What are the simplest two forms of expressions?
3. What is the difference between unary, binary, and ternary operators?
4. What is the best way to force your own operator precedence?
5. What is meant by operator associativity?
6. When would you use the === (identity) operator?
7. Name the three conditional statement types.
8. What command can you use to skip the current iteration of a loop and move on
to the next one?
9. Why is a for loop more powerful than a while loop?
10. How do if and while statements interpret conditional expressions of different data
types?


1. ?? In PHP, TRUE represents the value 1 and FALSE represents NULL, which can be thought
of as “nothing” and is output as the empty string.

2. a string literal and a number ?? The simplest forms of expressions are literals (such as numbers and strings) and
variables, which simply evaluate to themselves.

3. 1 operand, 2 operands, 3 operands

4. use ()

5. the direction in which an operator is evaluated

6. When I want to check the type and value of two variables. ?? You use the identity operator when you wish to bypass PHP’s automatic operand
type changing (also called type casting).

7. while, do..while and for

8. continue

9. ?? Loops using for statements are more powerful than while loops because they support
two additional parameters to control the loop handling.

10.  ?? Most conditional expressions in if and while statements are literal (or Boolean)
and therefore trigger execution when they evaluate to TRUE. Numeric expressions
trigger execution when they evaluate to a nonzero value. String expressions trigger
execution when they evaluate to a nonempty string. A NULL value is evaluated as
false and therefore does not trigger execution.



-----


Chapter 5

functions associated with a class or method are referred to as methods


Passing by Reference
In PHP, prefacing a variable name with the & symbol tells the parser to pass a reference
to the variable’s value, not the value itself.


Variable Scope
Local variables are accessible just from the part of code where you define them. If
they’re outside of a function, they can be accessed by all code outside of functions,
classes, and so on. If a variable is inside a function, only that function can access
the variable, and its value is lost when the function returns.

Global variables are accessible from all parts of your code.

Static variables are accessible only within the function that declared them but retain
their value over multiple calls.

The include Statement
Using include, you can tell PHP to fetch a particular file and load all its contents. It’s
as if you pasted the included file into the current file at the insertion point

Example:
<?php
include "library.php";
// Your code goes here
?>


To avoid redefining functions and constants twice it is better to use include_once instead of include. 
<?php
include_once "library.php";
// Your code goes here
?>


A potential problem with include and include_once is that PHP will only attempt to
include the requested file. Program execution continues even if the file is not found.
When it is absolutely essential to include a file, require it. For the same reasons I gave
for using include_once, I recommend that you generally stick with require_once whenever
you need to require a file


When creating objects, it is best to use encapsulation, or writing a class in such a way
that only its methods can be used to manipulate its properties. In other words, you
deny outside code direct access to its data. The methods you supply are known as the
object’s interface.


Class definitions contain the class name (which is case-sensitive), its properties, and its
methods.


To create an object with a specified class, use the new keyword, like this: $object =
new Class. Here are a couple of ways in which we could do this:
$object = new User;
$temp = new User('name', 'password');


The syntax for accessing an object’s property is $object->property.
Likewise, you call a method like this: $object->method().


You can place functions and class definitions anywhere in your code,
before or after statements that use them. Generally, though, it is considered
good practice to place them toward the end of a file.


How to write a constructor

<?php
class User
{
	function __construct($param1, $param2)
	{
		// Constructor statements go here
		public $username = "Guest";
	}
}
?>


How to write a Destructor
<?php
class User
{
	function __destruct()
	{
		// Destructor code goes here
	}
}
?>




As you have seen, declaring a method is similar to declaring a function, but there are a
few differences. For example, method names beginning with a double underscore
(__) are reserved and you should not create any of this form
You also have access to a special variable called $this, which can be used to access the
current object’s properties.


If you are using PHP 5, you can also define a method as static, which means that it is
called on a class and not on an object. A static method has no access to any object
properties.


<?php
User::pwd_string(); // Calling the static method

// Class definition
class User
{
	static function pwd_string()
	{
		echo "Please enter your password";
	}
}
?>

Note how the class itself is called, along with the static method, using a double colon
(::, also known as the scope resolution operator) and not ->. Static functions are useful
for performing actions relating to the class itself, but not to specific instances of the
class.



It is not necessary to explicitly declare properties within classes, as they can be implicitly
defined when first used. To illustrate this, in Example 5-19 the class User has no properties
and no methods but is legal code.

<?php
$object1 = new User();
$object1->name = "Alice";
echo $object1->name;

class User{}
?>



when you declare a property within a class, you may assign a default value to it.
The value you use must be a constant and not the result of a function or expression.



You can declare constants in a class as follows:


const CONSTANT_NAME = value;

<?php
Translate::lookup();
class Translate
{
const ENGLISH = 0;
const SPANISH = 1;
const FRENCH = 2;
const GERMAN = 3;
// ...
static function lookup()
{
echo self::SPANISH;
}
}
?>


constants are referred to using the self keyword followed by "::"


Use public when outside code should access this member and extending classes
should also inherit it.

Use protected when outside code should not access this member but extending
classes should inherit it.

Use private when outside code should not access this member and extending
classes also should not inherit it.


A property declared static cannot be
directly accessed within an instance of a class, but a static method can.


A static method or property can be accessed from within a class by using "self::" followed by the property or method name.



The parent operator
If you write a method in a subclass with the same name as one in its parent class, its
statements will override those of the parent class. Sometimes this is not the behavior
you want, and you need to access the parent’s method. To do this, you can use the
parent operator.

<?php
$object = new Son;
$object->test();
$object->test2();
class Dad
{
	function test()
	{
		echo "[Class Dad] I am your Father<br />";
	}
}

class Son extends Dad
{
	function test()
	{
		echo "[Class Son] I am Luke<br />";
	}

	function test2()
	{
		parent::test();
	}
}
?>


The output of the above is:
[Class Son] I am Luke
[Class Dad] I am your Father



Subclass constructors
When you extend a class and declare your own constructor, you should be aware that
PHP will not automatically call the constructor method of the parent class. To be certain
that all initialization code is executed, subclasses should always call the parent constructors,


Final methods
In cases in which you wish to prevent a subclass from overriding a superclass method,
you can use the final keyword

<?php
class User
{
	final function copyright()
	{
		echo "This class was written by Joe Smith";
	}
}
?>


Test Your Knowledge
1. What is the main benefit of using a function?
2. How many values can a function return?
3. What is the difference between accessing a variable by name and by reference?
4. What is the meaning of scope in PHP?
5. How can you incorporate one PHP file within another?
6. How is an object different from a function?
7. How do you create a new object in PHP?
8. What syntax would you use to create a subclass from an existing one?
9. How can you call an initializing piece of code when an object is created?
10. Why is it a good idea to explicitly declare properties within a class?



1. It allows one to reuse code easily without having to rewrite it.

2. As many as you want. ?? By default, a function can return a single value. But by utilizing arrays, references,
and global variables, any number of values can be returned.

3. By name: a copy is made.  By Reference: You have direct access (like an pointer)

4. Scope: in area of code in which a variable is visible (can be used)

5. by using: require_once "fileName";

6. An object can contain functions.  An object is a composite of functions plus data. ?? A function is a set of statements referenced by a name that can receive and return
values. An object may contain zero, one, or many functions (which are then called
methods) as well as variables (which are called properties), all combined in a single
unit.

7. new ClassName()

8. class newClass extends oldClass{}

9. By providing a constructor within the class: function __construct(){}

10. That way is it easier to locate where the property is initialized. ?? Explicitly declaring properties within a class is unnecessary, as they will be implicitly
declared upon first use. However, it is considered good practice as it helps
with code readability and debugging, and is especially useful to other people who
may have to maintain your code.



----
Chapter 6

foreach...as structure

foreach ($arrayName as $item)
{
	// Insert code to perform on each item in the array
}


foreach...as for associative arrays

<?php
	$paper = array('copier' => "Copier & Multipurpose",
	'inkjet' => "Inkjet Printer",
	'laser' => "Laser Printer",
	'photo' => "Photographic Paper");
	
	foreach ($paper as $item => $description)
		echo "$item: $description<br>";
?>
each item of the array $paper is fed into the key/value
pair of variables $item and $description, from where they are printed out.

Arrays and variables share the same namespace. This means that you cannot have a
string variable called $fred and an array also called $fred.


1. What is the difference between a numeric and an associative array?
2. What is the main benefit of the array keyword?
3. What is the difference between foreach and each?
4. How can you create a multidimensional array?
5. How can you determine the number of elements in an array?
6. What is the purpose of the explode function?
7. How can you set PHP’s internal pointer into an array back to the first element of
the array?

1. numeric: elements are accessed through a index. associate: elements are accessed using keys (strings) ?? alphanumeric identifiers

2. You dont have to keep track of the indexes of elements ?? The main benefit of the array keyword is that it enables you to assign several values
at a time to an array without repeating the array name.

3. ?? Both the each function and the foreach...as loop construct return elements from
an array; both start at the beginning and increment a pointer to make sure the next
element is returned each time, and both return FALSE when the end of the array is
reached. The difference is that the each function returns just a single element, so
it is usually wrapped in a loop. The foreach...as construct is already a loop, executing
repeatedly until the array is exhausted or you explicitly break out of the loop.

4. By embedded an array in another array

5. by using the count function

6. it turns a string into a array using the specified delimeter

7. By using the reset function.


-----

Chapter 7

Test Your Knowledge
1. Which printf conversion specifier would you use to display a floating-point
number?
2. What printf statement could be used to take the input string “Happy Birthday”
and output the string “**Happy”?
3. To send the output from printf to a variable instead of to a browser, what alternative
function would you use?
4. How would you create a Unix timestamp for 7:11 AM on May 2, 2016?
5. Which file access mode would you use with fopen to open a file in write and read
mode, with the file truncated and the file pointer at the start?
6. What is the PHP command for deleting the file file.txt?
7. Which PHP function is used to read in an entire file in one go, even from across
the Web?
8. Which PHP system variable holds the details on uploaded files?
9. Which PHP function enables the running of system commands?
10. What is wrong with the following XHTML 1.0 tag: <input type=file name=file
size=10>?

1. %f
2. printf("%'*7.5s", $param)
3. sprintf
4.mktime(7, 11, 0, 5, 2, 2016);
5. w+
6. unlink('file.txt');
7. file_get_contents()
8. $_FILES
9. executing
10. missing / before the ending >




