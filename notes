HTTP is a communication standard governing the requests and responses that take
place between the browser running on the end user’s computer and the web server.
The server’s job is to accept a request from the client and attempt to reply to it in a
meaningful way, usually by serving up a requested web page—that’s why the term
server is used. The natural counterpart to a server is a client, so that term is applied
both to the web browser and the computer on which it’s running.


Here are the steps:
1. You enter http://server.com into your browser’s address bar.
2. Your browser looks up the IP address for server.com.
3. Your browser issues a request to that address for the web server’s home page.
4. The request crosses the Internet and arrives at the server.com web server.
5. The web server, having received the request, fetches the home page from its hard
disk.
6. With the home page now in memory, the web server notices that it is a file incorporating
PHP scripting and passes the page to the PHP interpreter.
7. The PHP interpreter executes the PHP code.
8. Some of the PHP contains MySQL statements, which the PHP interpreter now
passes to the MySQL database engine.
9. The MySQL database returns the results of the statements back to the PHP interpreter.
10. The PHP interpreter returns the results of the executed PHP code, along with the
results from the MySQL database, to the web server.
11. The web server returns the page to the requesting client, which displays it.



JavaScript was originally developed to offer dynamic control
over the various elements within an HTML document, and that is still its main use. But
more and more, JavaScript is being used for Ajax. This is a term for the process of
accessing the web server in the background. (It originally meant “Asynchronous Java-
Script and XML,” but that phrase is already a bit outdated.)


Test Your Knowledge
1. What four components are needed to create a fully dynamic web page?
2. What does HTML stand for?
3. Why does the name MySQL contain the letters SQL?
4. PHP and JavaScript are both programming languages that generate dynamic results
for web pages. What is their main difference, and why would you use both of them?
5. What does CSS stand for?
6. If you encounter a bug (which is rare) in one of the open source tools, how do you
think you could get it fixed?

1. PHP, MySQL, JavaScript, Apache
2. hyper text markup languages
3. MySQL accepts commands in the SQL language so its name contains SQL
4. PHP is used for the backend (on the server).  Javascript is used on the front end (client side browser)
5. Cascading Sytle Sheets
6. I could fix it myself or submit a bug to the development team.


-----

Chapter 2

PHP is the language that you use to make the server
generate dynamic output—output that is potentially different each time a browser requests
a page.


By default, PHP documents end with the extension .php. When a web server encounters
this extension in a requested file, it automatically passes it to the PHP processor. Of
course, web servers are highly configurable, and some web developers choose to force
files ending with .htm or .html to also get parsed by the PHP processor, usually because
they want to hide the fact that they are using PHP.
Your PHP program is responsible for passing back a clean file suitable for display in a
web browser. At its very simplest, a PHP document will output only HTML.


----
Chapter 3


There are two ways in which you can add comments to your PHP code. The first turns
a single line into a comment by preceding it with a pair of forward slashes, like this:
// This is a comment


Multiline Comments
<?php
/* This is a section
of multiline comments
that will not be
interpreted */
?>


Array Creation
$team = array('Bill', 'Joe', 'Mike', 'Chris', 'Jim');


PHP supports two types of strings that are denoted by the type of quotation mark that
you use. If you wish to assign a literal string, preserving the exact contents, you should
use the single quotation mark (apostrophe), like this:

$info = 'Preface variables with a $ like this: $variable';


In this case, every character within the single-quoted string is assigned to $info. If you
had used double quotes, PHP would have attempted to evaluate $variable as a variable

On the other hand, when you want to include the value of a variable inside a string,
you do so by using a double-quoted string:

echo "There have been $count presidents of the US";

As you will realize, this syntax also offers a simpler form of concatenation in which you
don’t need to use a period, or close and reopen quotes, to append one string to another.
This is called variable substitution. You will notice some applications using it extensively
and others not using it at all.


you can use escape characters to insert various special characters into
strings, such as tabs, newlines, and carriage returns. These are represented, as you might
guess, by \t, \n, and \r. Here is an example using tabs to lay out a heading; it is included
here merely to illustrate escapes, because in web pages there are always better ways to
do layout:

$heading = "Date\tName\tPayment";

These special backslash-preceded characters work only in double-quoted strings. In
single-quoted strings, the preceding string would be displayed with the ugly \t sequences
instead of tabs. Within single-quoted strings, only the escaped apostrophe
(\') and the escaped backslash itself (\\) are recognized as escaped characters.



How to create constants in php

define("ROOT_LOCATION", "/usr/local/www/");
Then, to read the contents of the variable, you just refer to it like a regular variable (but
it isn’t preceded by a dollar sign):

$directory = ROOT_LOCATION;


----

Function declaration example:

<?php
function longdate($timestamp)
{
return date("l F jS Y", $timestamp);
}
?>

----

by default, variables created within a function are local to
that function and variables created outside of any functions can be accessed only by
nonfunction code.

---

Test Your Knowledge
1. What tag is used to cause PHP to start interpreting program code? And what is the
short form of the tag?
2. What are the two types of comment tags?
3. Which character must be placed at the end of every PHP statement?
4. Which symbol is used to preface all PHP variable names?
5. What can a variable store?
6. What is the difference between $variable = 1 and $variable == 1?
7. Why do you suppose that an underscore is allowed in variable names
($current_user), whereas hyphens are not ($current-user)?
8. Are variable names case-sensitive?
9. Can you use spaces in variable names?
10. How do you convert one variable type to another (say, a string to a number)?
11. What is the difference between ++$j and $j++?
12. Are the operators && and and interchangeable?
13. How can you create a multiline echo or assignment?
14. Can you redefine a constant?
15. How do you escape a quotation mark?
16. What is the difference between the echo and print commands?
17. What is the purpose of functions?
18. How can you make a variable accessible to all parts of a PHP program?
19. If you generate data within a function, what are a couple of ways to convey the
data to the rest of the program?
20. What is the result of combining a string with a number?



1. "<?php " and "?>"
2. // and /* ... */
3. ;
4. $
5. Anything you assign to it.
6. First one is assignment, the second one is comparison.
7. I think hyphens are not allowed so that they are not confused with subtractions.
8. Yes variable names are case-sensitive.
9. no.
10. Just use it in the function or situation that expects it to be a particular type.
The conversion is done automatically.
11. pre-increment vs post-increment
12. Not really unless parenthesis are used.
13. By using the heredoc construct.
14. no.
15. \'
16. echo is a php construct. print is a function.
17. To group a set of statements that perform a specific task so that they can be used as needed.
18. Preceed it with the global keyword.
19. Use a return statement to return the data or assign the data to a global variable.
20. If concatenation is used a string.  If a mathematical operator is used a number.


----


Chapter 4


An expression is a combination of values, variables, operators, and functions that results
in a value.

in PHP the constant FALSE is defined as NULL, or nothing.

The simplest form of an expression is a literal, which simply means something that
evaluates to itself, such as the number 73 or the string “Hello”. An expression could
also simply be a variable, which evaluates to the value that has been assigned to it.
These are both types of expressions because they return a value.

any strings composed entirely of numbers will be converted to numbers
whenever compared with a number


break

In a loop, "break" breaks out of the first for loop that it is located inside.


$c = (int) ($a / $b);
This is called explicit casting. Note that in order to ensure that the value of the entire
expression is cast to an integer, the expression is placed within parentheses. Otherwise,
only the variable $a would have been cast to an integer—a pointless exercise, as the
division by $b would still have returned a floating-point number.

Test Your Knowledge
1. What actual underlying values are represented by TRUE and FALSE?
2. What are the simplest two forms of expressions?
3. What is the difference between unary, binary, and ternary operators?
4. What is the best way to force your own operator precedence?
5. What is meant by operator associativity?
6. When would you use the === (identity) operator?
7. Name the three conditional statement types.
8. What command can you use to skip the current iteration of a loop and move on
to the next one?
9. Why is a for loop more powerful than a while loop?
10. How do if and while statements interpret conditional expressions of different data
types?


1. ?? In PHP, TRUE represents the value 1 and FALSE represents NULL, which can be thought
of as “nothing” and is output as the empty string.

2. a string literal and a number ?? The simplest forms of expressions are literals (such as numbers and strings) and
variables, which simply evaluate to themselves.

3. 1 operand, 2 operands, 3 operands

4. use ()

5. the direction in which an operator is evaluated

6. When I want to check the type and value of two variables. ?? You use the identity operator when you wish to bypass PHP’s automatic operand
type changing (also called type casting).

7. while, do..while and for

8. continue

9. ?? Loops using for statements are more powerful than while loops because they support
two additional parameters to control the loop handling.

10.  ?? Most conditional expressions in if and while statements are literal (or Boolean)
and therefore trigger execution when they evaluate to TRUE. Numeric expressions
trigger execution when they evaluate to a nonzero value. String expressions trigger
execution when they evaluate to a nonempty string. A NULL value is evaluated as
false and therefore does not trigger execution.

